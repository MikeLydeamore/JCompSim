summary(allestimates$X1.lambda)
summary(allestimates$X2.lambda)
summary(allestimates$X1.gamma)
image(kernel)
ggplot(data = allestimates) + geom_point(aes(x=X1.lambda, y=X1.gamma))
nrow(allestimates)
estimateParametersManyTimes <- function(missing_prob, replicates = 100) {
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, "makeSyntheticDataset")
clusterExport(cl, "estimateParameters")
clusterExport(cl, "pres_diffs")
clusterExport(cl, "pdf")
clusterExport(cl, "missing_prob")
clusterExport(cl, "Q")
clusterEvalQ(cl, library(msm))
estimates <- parLapply(cl, 1:replicates, function(x) {
print(x)
observations <- makeSyntheticDataset(missing_prob = 0.1)
parameters <- estimateParameters(observations)
return (parameters)
})
stopCluster(cl)
allestimates <- bind_rows(estimates)
return (allestimates)
}
allestimates <- estimateParametersManyTimes(0.0, replicates = 500)
kernel <- kde2d(allestimates$X1.lambda, allestimates$X1.gamma)
colnames(kernel$z) <- kernel$y
row.names(kernel$z) <- kernel$x
kernel.melted <- melt(kernel$z)
ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20))
?which.max(kernel.melted$value)
which.max(kernel.melted$value)
allestimates <- estimateParametersManyTimes(0.0, replicates = 500)
gplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
+   scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20))
ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
+   scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20))
ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") + scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20))
ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20)) +
geom_hline(aes(yintercept=kernel.melted[max, "Var2"]), linetype="dotted")
max <- which.max(kernel.melted$value)
ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20)) +
geom_hline(aes(yintercept=kernel.melted[max, "Var2"]), linetype="dotted")
ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20)) +
geom_hline(aes(yintercept=kernel.melted[max, "Var2"]), linetype="dotted") + geom_vline(aes(xintercept=kernel.melted[max, "Var1"]), linetype="dotted")
kernel.melted[max,]
install.packages("slackr")
library(slackr)
slackr_setup()
slackr_setup()
p <- ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20)) +
geom_hline(aes(yintercept=kernel.melted[max, "Var2"]), linetype="dotted") + geom_vline(aes(xintercept=kernel.melted[max, "Var1"]), linetype="dotted")
ggslackr(p)
allestimates <- estimateParametersManyTimes(0.0, replicates = 5000)
Sys.time()
Sys.time() - (Sys.time()-1)
Sys.time() - (Sys.time()-100)
slackr(Sys.time() - (Sys.time()-100))
start_time <- Sys.time()
end_time <- Sys.time()
slackr(end_time - start_time)
start_time <- Sys.time()
allestimates <- estimateParametersManyTimes(0.0, replicates = 5000)
kernel <- kde2d(allestimates$X1.lambda, allestimates$X1.gamma)
colnames(kernel$z) <- kernel$y
row.names(kernel$z) <- kernel$x
kernel.melted <- melt(kernel$z)
max <- which.max(kernel.melted$value)
p <- ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20)) +
geom_hline(aes(yintercept=kernel.melted[max, "Var2"]), linetype="dotted") + geom_vline(aes(xintercept=kernel.melted[max, "Var1"]), linetype="dotted")
end_time <- Sys.time()
ggslackr(p)
slackr(end_time - start_time)
kernel <- kde2d(allestimates$X1.lambda, allestimates$X1.gamma)
colnames(kernel$z) <- kernel$y
row.names(kernel$z) <- kernel$x
kernel.melted <- melt(kernel$z)
max <- which.max(kernel.melted$value)
p <- ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20)) +
geom_hline(aes(yintercept=kernel.melted[max, "Var2"]), linetype="dotted") + geom_vline(aes(xintercept=kernel.melted[max, "Var1"]), linetype="dotted")
ggslackr(p)
version
write.csv("/Users/mlydeamore/cloudstor/MSMFitting/pres_diffs.csv")
?write.csv
write.csv(pres_diffs,"/Users/mlydeamore/cloudstor/MSMFitting/pres_diffs.csv")
head(pres_diffs)
?read.csv
p
library(dynamite)
genericggSave("/Users/mlydeamore/cloudstor/MSMFitting/5000RepsPerfectData.png")
genericggSave("/Users/mlydeamore/cloudstor/MSMFitting/5000Reps10PercentData.png")
5119/13439
1-(5119/13439)
estimateParametersManyTimes <- function(missing_prob, replicates = 100) {
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, "makeSyntheticDataset")
clusterExport(cl, "estimateParameters")
clusterExport(cl, "pres_diffs")
clusterExport(cl, "pdf")
clusterExport(cl, "missing_prob")
clusterExport(cl, "Q")
clusterEvalQ(cl, library(msm))
estimates <- parLapply(cl, 1:replicates, function(x) {
print(x)
observations <- makeSyntheticDataset(missing_prob = missing_prob)
parameters <- estimateParameters(observations)
return (parameters)
})
stopCluster(cl)
allestimates <- bind_rows(estimates)
return (allestimates)
}
start_time <- Sys.time()
allestimates <- estimateParametersManyTimes(0.6, replicates = 1000)
kernel <- kde2d(allestimates$X1.lambda, allestimates$X1.gamma)
colnames(kernel$z) <- kernel$y
row.names(kernel$z) <- kernel$x
kernel.melted <- melt(kernel$z)
max <- which.max(kernel.melted$value)
p <- ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20)) +
geom_hline(aes(yintercept=kernel.melted[max, "Var2"]), linetype="dotted") + geom_vline(aes(xintercept=kernel.melted[max, "Var1"]), linetype="dotted")
end_time <- Sys.time()
ggslackr(p)
slackr(end_time - start_time)
p
?msm
head(allestimates)
head(allestimates[allestimates$X1.lambda < 1])
head(allestimates[allestimates$X1.lambda < 1, ])
nrow(allestimates[allestimates$X1.lambda < 1, ])
nrow(allestimates[allestimates$X1.lambda < 5, ])
nrow(allestimates[allestimates$X1.lambda < 20, ])
nrow(allestimates[allestimates$X1.lambda < 10, ])
nrow(allestimates[allestimates$X1.lambda < 5, ])
allestimes_restricted <- allestimates[allestimates$X1.lambda < 5,]
allestimates_restricted <- allestimates[allestimates$X1.lambda < 5,]
kernel <- kde2d(allestimates_restricted$X1.lambda, allestimates_restricted$X1.gamma)
colnames(kernel$z) <- kernel$y
row.names(kernel$z) <- kernel$x
kernel.melted <- melt(kernel$z)
max <- which.max(kernel.melted$value)
p <- ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20)) +
geom_hline(aes(yintercept=kernel.melted[max, "Var2"]), linetype="dotted") + geom_vline(aes(xintercept=kernel.melted[max, "Var1"]), linetype="dotted")
p
image(kernel)
allestimates_restricted <- allestimates[allestimates$X1.lambda > 5,]
kernel <- kde2d(allestimates_restricted$X1.lambda, allestimates_restricted$X1.gamma)
colnames(kernel$z) <- kernel$y
row.names(kernel$z) <- kernel$x
kernel.melted <- melt(kernel$z)
max <- which.max(kernel.melted$value)
p <- ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20)) +
geom_hline(aes(yintercept=kernel.melted[max, "Var2"]), linetype="dotted") + geom_vline(aes(xintercept=kernel.melted[max, "Var1"]), linetype="dotted")
p
allestimates_restricted <- allestimates[allestimates$X1.lambda > 1,]
kernel <- kde2d(allestimates_restricted$X1.lambda, allestimates_restricted$X1.gamma)
colnames(kernel$z) <- kernel$y
row.names(kernel$z) <- kernel$x
kernel.melted <- melt(kernel$z)
max <- which.max(kernel.melted$value)
p <- ggplot(kernel.melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + labs(x="Duration in S", y="Duration in I") +
scale_fill_continuous(low = "#FFFFFF", high="#FF0000") + geom_vline(aes(xintercept=60)) + geom_hline(aes(yintercept=20)) +
geom_hline(aes(yintercept=kernel.melted[max, "Var2"]), linetype="dotted") + geom_vline(aes(xintercept=kernel.melted[max, "Var1"]), linetype="dotted")
p
?melt
pres_diffs <- read.csv("/Users/mlydeamore/cloudstor/MSMFitting/pres_diffs.csv")$x
head(pres_diffs)
version
library(pryr)
library(plyr)
library(dplyr)
library(ggplot2)
source('~/Documents/PhD/GAS/2016_East_Arnhem_Healthy_Skin/clinic/scripts/regressionTesting.R')
library(Cairo)
graphicsPathName <- "/Users/mlydeamore/Documents/PhD/GAS/2016_East_Arnhem_Healthy_Skin/clinic/scripts/regression/"
saveGraphics <- F
df_scabies <- loadScabiesData()
df_scabies_filtered <- filter(df_scabies, birth_year != 2006)
sum(df_scabies_filtered$status == 1)
df_skinsores <- loadGASData()
df_skinsores_filtered <- filter(df_skinsores, birth_year != 2006)
sum(df_skinsores_filtered$status == 1)
df_scabies_filtered$id %in% df_skinsores_filtered$id
View(df_skinsores)
df_scabies_filtered$id == df_skinsores_filtered$id
c(5, 10, 3, 7) == c(5, 9, 3, 7)
sum(df_skinsores_filtered$status == 1 && df_scabies_filtered$status == 1)
sum((df_skinsores_filtered$status == 1) && (df_scabies_filtered$status == 1))
sum((df_skinsores_filtered$status == 1) & (df_scabies_filtered$status == 1))
summary(coxph(Surv(time, status)~birth_quarter, data=df_skinsores_filtered))
summary(survfit(Surv(time, status)~1, data=df_skinsores_filtered))
survfit(Surv(time, status)~1, data=df_skinsores_filtered)
survfit(Surv(time, status)~1, data=df_skinsores_filtered)*12
0.575*12
0.51*12
0.509*12
0.646*12
MLE_ <- solveMLE(getFrameForFitting(df_skinsores_filtered))
MLE_
1/1.18
1/1.18 *12
MLE <- data.frame(alpha = MLE_$estimate[1], lambda = MLE_$estimate[2])
-1/MLE$lambda * log((0.5-MLE$alpha)/(1-MLE$alpha))
-1/MLE$lambda * log((0.5-MLE$alpha)/(1-MLE$alpha)) *12
library(expsurv)
library(devtools)
bootstr <- bootstrap(MLE$alpha, MLE$lambda, df=df_skinsores_filtered, n=200)
estimatesAlpha <- sapply(X = bootstr["estimate", ], FUN=head, 1)
estimatesLambda <- sapply(X = bootstr["estimate",], FUN=tail, 1)
data.frame(
lower = quantile(medians, probs = 0.05), upper = quantile(medians, probs = 0.95),
lowerAlpha = quantile(estimatesAlpha, probs=0.05), upperAlpha = quantile(estimatesAlpha, probs=0.95),
lowerMean = quantile(1/estimatesLambda, probs=0.05), upperMean = quantile(1/estimatesLambda, probs=0.95)))}
data.frame(
lower = quantile(medians, probs = 0.05), upper = quantile(medians, probs = 0.95),
lowerAlpha = quantile(estimatesAlpha, probs=0.05), upperAlpha = quantile(estimatesAlpha, probs=0.95),
lowerMean = quantile(1/estimatesLambda, probs=0.05), upperMean = quantile(1/estimatesLambda, probs=0.95))
medians <- -log((0.5-estimatesAlpha)/(1-estimatesAlpha)) /estimatesLambda
data.frame(
lower = quantile(medians, probs = 0.05), upper = quantile(medians, probs = 0.95),
lowerAlpha = quantile(estimatesAlpha, probs=0.05), upperAlpha = quantile(estimatesAlpha, probs=0.95),
lowerMean = quantile(1/estimatesLambda, probs=0.05), upperMean = quantile(1/estimatesLambda, probs=0.95))
data.frame(
lower = quantile(medians, probs = 0.05), upper = quantile(medians, probs = 0.95),
lowerAlpha = quantile(estimatesAlpha, probs=0.05), upperAlpha = quantile(estimatesAlpha, probs=0.95),
lowerMean = quantile(1/estimatesLambda, probs=0.05), upperMean = quantile(1/estimatesLambda, probs=0.95)) * 12
1/0.78
MLE
MLE_ <- solveMLE(getFrameForFitting(df_scabies_filtered))
MLE <- data.frame(alpha = MLE_$estimate[1], lambda = MLE_$estimate[2])
MLE
1/1.39
1/1.39 * 12
bootstr <- bootstrap(MLE$alpha, MLE$lambda, df=df_scabies_filtered, n=200)
estimatesAlpha <- sapply(X = bootstr["estimate", ], FUN=head, 1)
estimatesLambda <- sapply(X = bootstr["estimate",], FUN=tail, 1)
medians <- -log((0.5-estimatesAlpha)/(1-estimatesAlpha)) /estimatesLambda
data.frame(
lower = quantile(medians, probs = 0.05), upper = quantile(medians, probs = 0.95),
lowerAlpha = quantile(estimatesAlpha, probs=0.05), upperAlpha = quantile(estimatesAlpha, probs=0.95),
lowerMean = quantile(1/estimatesLambda, probs=0.05), upperMean = quantile(1/estimatesLambda, probs=0.95)) * 12
-1/MLE$lambda * log((0.5-MLE$alpha)/(1-MLE$alpha))
-1/MLE$lambda * log((0.5-MLE$alpha)/(1-MLE$alpha)) *12
survfit(Surv(time, status)~1, df=df_scabies_filtered)
survfit(Surv(time, status)~1, data=df_skinsores_filtered)
survfit(Surv(time, status)~1, data=df_scabies_filtered)
survfit(Surv(time, status)~1, data=df_scabies_filtered) * 12
survfit(Surv(time, status)~1, data=df_scabies_filtered)
survfit(Surv(time, status)~1, df=df_scabies_filtered)
survfit(Surv(time, status)~1, data=df_scabies_filtered)
0.632*12
0.561*12
0.747*12
estimatesLambda <- lapply(1:5, function(x) {
bootstr <- bootstrap(listMLE[[x]]$alpha, listMLE[[x]]$lambda, df = filter(df_skinsores_filtered, community == levels(df_skinsores_filtered$community)[x]), n = 200)
estimatesAlpha <- sapply(X = bootstr["estimate", ], FUN=head, 1)
estimatesLambda <- sapply(X = bootstr["estimate",], FUN=tail, 1)
medians <- -log((0.5-estimatesAlpha)/(1-estimatesAlpha)) /estimatesLambda
return (data.frame(community = levels(df_skinsores_filtered$community)[x],
lower = quantile(medians, probs = 0.05), upper = quantile(medians, probs = 0.95),
lowerAlpha = quantile(estimatesAlpha, probs=0.05), upperAlpha = quantile(estimatesAlpha, probs=0.95),
lowerMean = quantile(1/estimatesLambda, probs=0.05), upperMean = quantile(1/estimatesLambda, probs=0.95)))})
listMLE <- lapply(levels(df_skinsores_filtered$community), function(x) {fitParametricBy(df_skinsores_filtered, x)})
MLETime <- seq(0, 6, 0.02)
l <- lapply(1:5, function(x) { convertMLEToFrame(MLETime, listMLE[[x]], levels(df_skinsores_filtered$community)[x])})
MLEFrame <- rbind.fill(l)
estimatesLambda <- lapply(1:5, function(x) {
bootstr <- bootstrap(listMLE[[x]]$alpha, listMLE[[x]]$lambda, df = filter(df_skinsores_filtered, community == levels(df_skinsores_filtered$community)[x]), n = 200)
estimatesAlpha <- sapply(X = bootstr["estimate", ], FUN=head, 1)
estimatesLambda <- sapply(X = bootstr["estimate",], FUN=tail, 1)
medians <- -log((0.5-estimatesAlpha)/(1-estimatesAlpha)) /estimatesLambda
return (data.frame(community = levels(df_skinsores_filtered$community)[x],
lower = quantile(medians, probs = 0.05), upper = quantile(medians, probs = 0.95),
lowerAlpha = quantile(estimatesAlpha, probs=0.05), upperAlpha = quantile(estimatesAlpha, probs=0.95),
lowerMean = quantile(1/estimatesLambda, probs=0.05), upperMean = quantile(1/estimatesLambda, probs=0.95)))})
estimatesLambda
listMLE
1/1.29
1/1.09
1/1.29 * 12
1/1.09 * 12
listMLE <- lapply(levels(df_scabies_filtered$community), function(x) {fitParametricBy(df_scabies_filtered, x)})
listMLE
1/1.72 * 12
1/0.83 * 12
?hmmBinom
skinsores.msm
skinsores.msm$sojourn
plot.survfit.msm(skinsores.msm)
warnings()
plot.survfit.msm(skinsores.msm, main="skinsores.msm: no covariates", + mark.time=F)
plot.survfit.msm(skinsores.msm, main="skinsores.msm: no covariates", mark.time=F)
?par
plot.survfit.msm(skinsores.msm)
data_ss <- filter(data, !is.na(skin_sores))
skinsores.msm <- msm(skin_sores ~ age_seen, subject = id, data=data_ss, qmatrix=Q.crude)
data_ss$skin_sores <- as.factor(as.numeric(data_ss$skin_sores))
skinsores.msm <- msm(skin_sores ~ age_seen, subject = id, data=data_ss, qmatrix=Q.crude)
plot.survfit.msm(skinsores.msm)
warnings()
prevalence.msm(skinsores.msm, times=c(5, 50))
prevalence.msm(skinsores.msm, times=c(5, 50, 500))
p1 <- pearson.msm(skinsores.msm)
p1$test
?pearson.msm
p1$test[[4]]
df <- data("fev")
library(msm)
data("fev")
fev
head(fev)
levels(fev$acute)
unique(fev$acute)
?optim
?hmodel
?hmmBinom
?viterbi.msm
data_ss <- data
data_ss[is.na(data_ss$skin_sores), "skin_sores"] <- 9
data_ss <- data
data_ss[is.na(data_ss$skin_sores), "skin_sores"] <- as.factor(9)
levels(data_ss$skin_sores)
levels(data_ss$skin_sores) <- c("0","1","9")
data_ss[is.na(data_ss$skin_sores), "skin_sores"] <- as.factor(9)
data_ss <- data
levels(data_ss$skin_sores) <- c("0","1","2")
data_ss$skin_sores <- as.factor(as.numeric(data_ss$skin_sores))
head(data_ss)
head(data_ss$skin_sores)
data_ss[is.na(data_ss$skin_sores), "skin_sores"] <- as.factor(2)
head(data_ss$skin_sores)
data_ss <- data
head(data_ss$skin_sores)
levels(data_ss$skin_sores) <- c("0","1","2")
head(data_ss$skin_sores)
data_ss[is.na(data_ss$skin_sores), "skin_sores"] <- 2
head(data_ss$skin_sores)
data_ss$skin_sores <- as.factor(as.numeric(data_ss$skin_sores))
head(data_ss$skin_sores)
ematrix <- rbind(c(0, 0, 0.1), c(0, 0, 0.1), c(0, 0, 0))
Q.3 <- rbind(c(-0.5, 0.5, 0), c(0.5, -0.5, 0), c(0, 0, 0))
test.msm <- msm(skin_sores ~ age_seen, id, data=data_ss, qmatrix=Q, ematrix=ematrix)
test.msm <- msm(skin_sores ~ age_seen, id, data=data_ss, qmatrix=Q.3, ematrix=ematrix)
Q.3 <- rbind(c(-0.5, 0.5, 0), c(0.5, -0.5, 0), c(0.5, 0.5, -1))
test.msm <- msm(skin_sores ~ age_seen, id, data=data_ss, qmatrix=Q.3, ematrix=ematrix)
warningS()
warnings()
?optim
?msm
?optim
1/1
1/100
1/1000
KMScabies <- lapply(levels(df_scabies_filtered$community), fitKMByCommunity)
KMList <- lapply(1:5, function(x) { ret <- data.frame(Time=KMScabies[[x]]$time, surv=KMScabies[[x]]$surv, upper=KMScabies[[x]]$upper, lower=KMScabies[[x]]$lower,
Community = rep(levels(df_scabies_filtered$community)[x], length(KMScabies[[x]]$time)) )} )
KMFrame <- rbind.fill(KMList)
ggplot() + geom_line(data = KMFrame, aes(x=Time*12, y=surv, colour=Community)) + geom_ribbon(data = KMFrame, aes(x=Time*12, ymin=lower, ymax=upper, fill=Community), alpha = 0.3) +
facet_wrap("Community") + theme_bw() + labs(x = "Age [months]", y = "S(t)") + theme(legend.position="none", text = element_text(size = 7)) +
scale_x_continuous(limits = c(0, 6), expand=c(0,0)) + scale_y_continuous(limits = c(0, 1), expand=c(0,0)) + theme(panel.grid = element_blank())
ggplot() + geom_line(data = KMFrame, aes(x=Time*12, y=surv, colour=Community)) + geom_ribbon(data = KMFrame, aes(x=Time*12, ymin=lower, ymax=upper, fill=Community), alpha = 0.3) +
facet_wrap("Community") + theme_bw() + labs(x = "Age [months]", y = "S(t)") + theme(legend.position="none", text = element_text(size = 7)) +
scale_x_continuous(limits = c(0, 30), expand=c(0,0)) + scale_y_continuous(limits = c(0, 1), expand=c(0,0)) + theme(panel.grid = element_blank())
ggplot() + geom_line(data = KMFrame, aes(x=Time*12, y=surv, colour=Community)) + geom_ribbon(data = KMFrame, aes(x=Time*12, ymin=lower, ymax=upper, fill=Community), alpha = 0.3) +
facet_wrap("Community") + theme_bw() + labs(x = "Age [months]", y = "S(t)") + theme(legend.position="none", text = element_text(size = 7)) +
scale_x_continuous(limits = c(0, 60), expand=c(0,0)) + scale_y_continuous(limits = c(0, 1), expand=c(0,0)) + theme(panel.grid = element_blank())
ggsave(paste(graphicsPathName, "scabies_kaplan_meier.png", sep=""), width = 13.58, height = 8.75, units = "cm", type = "cairo-png")
df_skinsores <- loadGASData()
df_skinsores_filtered <- filter(df_skinsores, birth_year != 2006)
ggplot(data = filter(df_skinsores_filtered, status == 1)) + geom_histogram(aes(x=time*12), bins=36, colour="black") + theme_bw() + labs(x="Age [months]", y="Frequency") +
theme(text = element_text(size=12)) + scale_x_continuous(limits = c(0, 36), expand=c(0,0)) + scale_y_continuous(limits = c(0, NA), expand=c(0,0)) + expand_limits(y=60) +
theme(panel.grid = element_blank())
ggplot(data = filter(df_skinsores_filtered, status == 1)) + geom_histogram(aes(x=time*12), bins=36, colour="black") + theme_bw() + labs(x="Age [months]", y="Frequency") +
theme(text = element_text(size=12)) + scale_x_continuous(limits = c(0, 60), expand=c(0,0)) + scale_y_continuous(limits = c(0, NA), expand=c(0,0)) + expand_limits(y=60) +
theme(panel.grid = element_blank())
ggplot(data = filter(df_skinsores_filtered, status == 1)) + geom_histogram(aes(x=time*12), bins=60, colour="black") + theme_bw() + labs(x="Age [months]", y="Frequency") +
theme(text = element_text(size=12)) + scale_x_continuous(limits = c(0, 60), expand=c(0,0)) + scale_y_continuous(limits = c(0, NA), expand=c(0,0)) + expand_limits(y=60) +
theme(panel.grid = element_blank())
ggsave(paste(graphicsPathName, "gas_ages_inection_histogram.png", sep=""), width = 13.58, height = 8.75, units="cm", type = "cairo-png")
df_scabies <- loadScabiesData()
df_scabies_filtered <- filter(df_scabies, birth_year != 2006)
ggplot(data = filter(df_scabies_filtered, status == 1)) + geom_histogram(aes(x=time*12), bins=60, colour="black") + theme_bw() + labs(x="Age [months]", y="Frequency") +
theme(text = element_text(size=12)) + scale_x_continuous(limits = c(0, 60), expand=c(0,0)) + scale_y_continuous(limits = c(0, NA), expand=c(0,0)) + expand_limits(y=60) +
theme(panel.grid = element_blank())
ggsave(paste(graphicsPathName, "scabies_ages_inection_histogram.png", sep=""), width = 13.58, height = 8.75, units="cm", type = "cairo-png")
getwd()
setwd("~/Documents/PhD/MarkovChainSimulator/")
souce("~/cloudstor/CoupledInfectionModels/SimulationUtils.R")
source("~/cloudstor/CoupledInfectionModels/SimulationUtils.R")
discretizeSimulation <- function(df, t) {
res <- lapply(1:length(t), function(i) {
index <- which(t[i] < df[, "t"])[1]-1
return (df[index, ])
})
return(do.call(rbind, res))
}
df <- read.csv("sirws1.csv")
df1 <- discretizeSimulation(df, seq(0, 365, 0.1))
plot(df1$t, df1$I)
tail(df1)
plot(df1[2000:3000,]$t, df1[2000:3000,]$I)
ggplot(data = df1[2000:3000,]) + geom_line(aes(x=t, y=I))
library(ggplot2)
ggplot(data = df1[2000:3000,]) + geom_line(aes(x=t, y=I))
ggplot(data = df1[500:3000,]) + geom_line(aes(x=t, y=I))
df1 <- discretizeSimulation(df, seq(0, 365, 0.5))
ggplot(data = df1[50:731,]) + geom_line(aes(x=t, y=I))
df <- read.csv("sir1.csv")
ggplot(data = df) + geom_line(aes(x=t, y=I))
df <- read.csv("sirws1.csv")
df1 <- discretizeSimulation(df, seq(0, 365, 0.1))
ggplot(data = df1) + geom_line(aes(x=t, y=I))
max(df1$I)
tail(df1)
head(df1)
which(is.na(df1$I))
which(is.na(df1$I))[1]
df1[502,]
df1[501,]
ggplot(data = filter(df1, t > 5)) + geom_line(aes(x=t, y=I))
df1$t > 5
df1 <- discretizeSimulation(df, seq(0, 50, 0.1))
ggplot(data = df1) + geom_line(aes(x=t, y=I))
head(filter(df1, t > 5))
max(df1$t)
library(dplyr)
?filter
ggplot(data = filter(df1, t > 5)) + geom_line(aes(x=t, y=I))
t <- list()
t[1]
t[1] <- 2
t
t[2] <- 2
t
for (i in seq(1, 100)) {
df <- read.csv(paste("~/Documents/PhD/MarkovChainSimulator/outputs/SIRWS/run-",1,".csv", sep=""))
df_disc[i] <- discretizeSimulation(df, seq(0, 50, 0.1))
}
df_disc <- list()
for (i in seq(1, 100)) {
df <- read.csv(paste("~/Documents/PhD/MarkovChainSimulator/outputs/SIRWS/run-",1,".csv", sep=""))
df_disc[i] <- discretizeSimulation(df, seq(0, 50, 0.1))
}
warnings()
head(df_disc[1])
df_disc <- lapply(1:100, function(x) {
df <- read.csv(paste("~/Documents/PhD/MarkovChainSimulator/outputs/SIRWS/run-",1,".csv", sep=""))
df_disc <- discretizeSimulation(df, seq(0, 50, 0.1))
return (df_disc)
}
df_mean <-
df_disc <- lapply(1:100, function(x) {
df <- read.csv(paste("~/Documents/PhD/MarkovChainSimulator/outputs/SIRWS/run-",1,".csv", sep=""))
df_disc <- discretizeSimulation(df, seq(0, 50, 0.1))
return (df_disc)
})
df_disc[[1]]
head(df_disc[[1]])
times <- seq(0, 50, 0.1)
df_mean <- lapply(1:times, function(x) {
mean <- 0
for (i in 1:100) {
mean <- mean + df_disc[[x]]
}
return (mean/100)
})
times <- seq(0, 50, 0.1)
df_mean <- lapply(1:length(times), function(x) {
mean <- 0
for (i in 1:100) {
mean <- mean + df_disc[[x]]
}
return (mean/100)
})
length(times)
head(df_disc[[1]])
head(df_disc[[1]])[, "I"]
(df_disc[[1]])[20, "I"]
times <- seq(0, 50, 0.1)
df_mean <- lapply(1:length(times), function(x) {
mean <- 0
for (i in 1:100) {
mean <- mean + df_disc[[i]][x, "I"]
}
return (mean/100)
})
df_mean <- data.frame("t"=times, "I"=do.call(rbind, df_mean))
ggplot(data = df_mean) + geom_line(aes(x=t, y=I))
ggplot(data = df_mean[2,]) + geom_line(aes(x=t, y=I))
df_mean[2,]
df_mean[-1,]
ggplot(data = df_mean[-1,]) + geom_line(aes(x=t, y=I))
ggplot(data = df_mean[-c(1, 2),]) + geom_line(aes(x=t, y=I))
ggplot(data = filter(df_mean, t > 1)) + geom_line(aes(x=t, y=I))
ggplot(data = filter(df_mean, t > 1)) + geom_line(aes(x=t, y=I/10000))
ggplot(data = filter(df_mean, t > 1)) + geom_line(aes(x=t, y=I/10000)) + ylim(c(0, 0.1))
ggplot(data = filter(df_mean, t > 1)) + geom_line(aes(x=t, y=I/10000)) + ylim(c(0, 0.01))
ggplot(data = filter(df_mean, t > 1)) + geom_line(aes(x=t, y=I/10000)) + ylim(c(0, 0.05))
ggplot(data = filter(df_mean, t > 1)) + geom_line(aes(x=t, y=I/10000))
