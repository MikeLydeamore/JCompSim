dI2CHat <- gamma*I2C - tau*I2CHat
dI2 <- phi*beta*S2*I - (gamma+tau)*I2
dI2Hat <- gamma*I2 - tau*I2Hat
list(c(dS, dIA, dIAHat, dIHAt, dGHat, dYHat, dY, dM, dS2, dI2C, dI2CHat, dI2, dI2Hat))
})
}
parameters <- c(beta=(1/63)/1000, phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0.0175)
state <- c(S=900, IA=100, IAHat=0, IHat=0, GHat=0, YHat=0, Y=0, M=0, I2C=0, I2CHat=0, I2=0, I2Hat=0, S2=0)
microbenchmark(ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters), units="s")
ScabiesModel <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
I = IA+IAHat+IHat+I2C+I2CHat+I2+I2Hat
dS <- -beta*S*I + tau*IA
dIA <- beta*S*I - (gamma+tau)*IA
dIAHat <- gamma*IA - (psi + tau)*IAHat
dIHat <- psi*IAHat -tau*IHat
dGHat <- tau * (IAHat + IHat + YHat + I2CHat + I2Hat) - (sigma + mu)*GHat
dYHat <- sigma * GHat - (rho+tau+mu)*YHat
dY <- rho * YHat - (delta + tau)*Y
dM <- delta * Y - (alpha+tau)*M
dS2 <- tau*(Y+M+I2C+I2) - phi*beta*S2*I
dI2C <- alpha*M - (gamma+tau)*I2C
dI2CHat <- gamma*I2C - tau*I2CHat
dI2 <- phi*beta*S2*I - (gamma+tau)*I2
dI2Hat <- gamma*I2 - tau*I2Hat
list(c(dS, dIA, dIAHat, dIHAt, dGHat, dYHat, dY, dM, dS2, dI2C, dI2CHat, dI2, dI2Hat))
})
}
microbenchmark(ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters), units="s")
ScabiesModel <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
I = IA+IAHat+IHat+I2C+I2CHat+I2+I2Hat
dS <- -beta*S*I + tau*IA
dIA <- beta*S*I - (gamma+tau)*IA
dIAHat <- gamma*IA - (psi + tau)*IAHat
dIHat <- psi*IAHat -tau*IHat
dGHat <- tau * (IAHat + IHat + YHat + I2CHat + I2Hat) - (sigma)*GHat
dYHat <- sigma * GHat - (rho+tau)*YHat
dY <- rho * YHat - (delta + tau)*Y
dM <- delta * Y - (alpha+tau)*M
dS2 <- tau*(Y+M+I2C+I2) - phi*beta*S2*I
dI2C <- alpha*M - (gamma+tau)*I2C
dI2CHat <- gamma*I2C - tau*I2CHat
dI2 <- phi*beta*S2*I - (gamma+tau)*I2
dI2Hat <- gamma*I2 - tau*I2Hat
list(c(dS, dIA, dIAHat, dIHAt, dGHat, dYHat, dY, dM, dS2, dI2C, dI2CHat, dI2, dI2Hat))
})
}
parameters <- c(beta=(1/63)/1000, phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0.0175)
state <- c(S=900, IA=100, IAHat=0, IHat=0, GHat=0, YHat=0, Y=0, M=0, I2C=0, I2CHat=0, I2=0, I2Hat=0, S2=0)
microbenchmark(ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters), units="s")
ScabiesModel <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
I = IA+IAHat+IHat+I2C+I2CHat+I2+I2Hat
dS <- -beta*S*I + tau*IA
dIA <- beta*S*I - (gamma+tau)*IA
dIAHat <- gamma*IA - (psi + tau)*IAHat
dIHat <- psi*IAHat -tau*IHat
dGHat <- tau * (IAHat + IHat + YHat + I2CHat + I2Hat) - (sigma)*GHat
dYHat <- sigma * GHat - (rho+tau)*YHat
dY <- rho * YHat - (delta + tau)*Y
dM <- delta * Y - (alpha+tau)*M
dS2 <- tau*(Y+M+I2C+I2) - phi*beta*S2*I
dI2C <- alpha*M - (gamma+tau)*I2C
dI2CHat <- gamma*I2C - tau*I2CHat
dI2 <- phi*beta*S2*I - (gamma+tau)*I2
dI2Hat <- gamma*I2 - tau*I2Hat
list(c(dS, dIA, dIAHat, dIHat, dGHat, dYHat, dY, dM, dS2, dI2C, dI2CHat, dI2, dI2Hat))
})
}
parameters <- c(beta=(1/63)/1000, phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0.0175)
state <- c(S=900, IA=100, IAHat=0, IHat=0, GHat=0, YHat=0, Y=0, M=0, I2C=0, I2CHat=0, I2=0, I2Hat=0, S2=0)
microbenchmark(ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters), units="s")
out <- ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters)
head(out)
out <- ode(y=state, times=seq(0, 1000, 0.1), func=ScabiesModel, parms=parameters)
head(out)
seq(0, 1, 0.1)
ScabiesModel(0, state, parametesr)
ScabiesModel(0, state, parameters)
SIRS
out <- ode(y=state, times=seq(0, 1000, by=0.01), func=ScabiesModel, parms=parameters)
head(out)
parameters <- c(beta=(1/63), phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0.0175)
state <- c(S=0.9, IA=0.1, IAHat=0, IHat=0, GHat=0, YHat=0, Y=0, M=0, I2C=0, I2CHat=0, I2=0, I2Hat=0, S2=0)
microbenchmark(ode(y=state, times=seq(0, 1000, 0.1), func=ScabiesModel, parms=parameters), units="s")
out <- ode(y=state, times=seq(0, 1000, by=0.01), func=ScabiesModel, parms=parameters)
head(out)
out <- c("")
out <- ode(y=state, times=seq(0, 1000, by=0.01), func=ScabiesModel, parms=parameters)
head(out)
ScabiesModel(1, state, parameters)
ScabiesModel(2, state, parameters)
length(state)
ScabiesModel(2, state, parameters) %>% length
length(ScabiesModel(2, state, parameters))
length(ScabiesModel(2, state, parameters)[[1]])
ScabiesModel <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
I = IA+IAHat+IHat+I2C+I2CHat+I2+I2Hat
dS <- -beta*S*I + tau*IA
dIA <- beta*S*I - (gamma+tau)*IA
dIAHat <- gamma*IA - (psi + tau)*IAHat
dIHat <- psi*IAHat -tau*IHat
dGHat <- tau * (IAHat + IHat + YHat + I2CHat + I2Hat) - sigma*GHat
dYHat <- sigma * GHat - (rho+tau)*YHat
dY <- rho * YHat - (delta + tau)*Y
dM <- delta * Y - (alpha+tau)*M
dS2 <- tau*(Y+M+I2C+I2) - phi*beta*S2*I
dI2C <- alpha*M - (gamma+tau)*I2C
dI2CHat <- gamma*I2C - tau*I2CHat
dI2 <- phi*beta*S2*I - (gamma+tau)*I2
dI2Hat <- gamma*I2 - tau*I2Hat
list(c(dS, dIA, dIAHat, dIHat, dGHat, dYHat, dY, dM, dS2, dI2C, dI2CHat, dI2, dI2Hat))
})
}
parameters <- c(beta=(1/63), phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0.0175)
state <- c(S=0.9, IA=0.1, IAHat=0, IHat=0, GHat=0, YHat=0, Y=0, M=0, I2C=0, I2CHat=0, I2=0, I2Hat=0, S2=0)
out <- ode(y=state, times=seq(0, 1000, by=0.01), func=ScabiesModel, parms=parameters)
out <- ode(y=state, times=seq(0, 1000, by=0.01), func=ScabiesModel, parms=parameters, method="ode45")
out <- ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
head(out)
sum(out[2, -1])
sum(out[2, -c(1, 2, 3)])
sum(out[2, -c(1, 2, 3, 4)])
out([10:20,])
out[10:20,]
out[50:75,]
out[100:125,]
head(out)
out("S")
out["S"]
out[,"S"]
out[,"I2C"]
plot(out)
ScabiesModel(1, out[300, -1], parameters)
sum(ScabiesModel(1, out[300, -1], parameters)[[1]])
out[300,]
parameters <- c(beta=0, phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0.0175)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
out[, "GHat"]
plot(out)
parameters <- c(beta=0, phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
plot(out)
parameters <- c(beta=0, phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=0, delta=1/5,
tau = 0.0175)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
parameters <- c(beta=0, phi=0.5, alpha=0, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0.0175)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
ScabiesModel <- function(t, state, parameters) {
if (state$G < 0)
print(state$G)
with(as.list(c(state, parameters)), {
I = IA+IAHat+IHat+I2C+I2CHat+I2+I2Hat
dS <- -beta*S*I + tau*IA
dIA <- beta*S*I - (gamma+tau)*IA
dIAHat <- gamma*IA - (psi + tau)*IAHat
dIHat <- psi*IAHat -tau*IHat
dGHat <- tau * (IAHat + IHat + YHat + I2CHat + I2Hat) - sigma*GHat
dYHat <- sigma * GHat - (rho+tau)*YHat
dY <- rho * YHat - (delta + tau)*Y
dM <- delta * Y - (alpha+tau)*M
dS2 <- tau*(Y+M+I2C+I2) - phi*beta*S2*I
dI2C <- alpha*M - (gamma+tau)*I2C
dI2CHat <- gamma*I2C - tau*I2CHat
dI2 <- phi*beta*S2*I - (gamma+tau)*I2
dI2Hat <- gamma*I2 - tau*I2Hat
list(c(dS, dIA, dIAHat, dIHat, dGHat, dYHat, dY, dM, dS2, dI2C, dI2CHat, dI2, dI2Hat))
})
}
parameters <- c(beta=0, phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0.0175)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
ScabiesModel <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
I = IA+IAHat+IHat+I2C+I2CHat+I2+I2Hat
dS <- -beta*S*I + tau*IA
dIA <- beta*S*I - (gamma+tau)*IA
dIAHat <- gamma*IA - (psi + tau)*IAHat
dIHat <- psi*IAHat -tau*IHat
dGHat <- tau * (IAHat + IHat + YHat + I2CHat + I2Hat) - sigma*GHat
dYHat <- sigma * GHat - (rho+tau)*YHat
dY <- rho * YHat - (delta + tau)*Y
dM <- delta * Y - (alpha+tau)*M
dS2 <- tau*(Y+M+I2C+I2) - phi*beta*S2*I
dI2C <- alpha*M - (gamma+tau)*I2C
dI2CHat <- gamma*I2C - tau*I2CHat
dI2 <- phi*beta*S2*I - (gamma+tau)*I2
dI2Hat <- gamma*I2 - tau*I2Hat
list(c(dS, dIA, dIAHat, dIHat, dGHat, dYHat, dY, dM, dS2, dI2C, dI2CHat, dI2, dI2Hat))
})
}
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
which(out[,"G"]<0)
out[,"GHat"]
out[,"GHat"]<0
which(out[,"GHat"]<0)
which(out[,"GHat"]<0)[1]
out[173,]
out[200,]
which(out[,"GHat"]<-1)[1]
out[,"GHat"]<(-1)
tail(otu)
tail(out)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
out[,"GHat"]<(-1)
out[,"GHat"]<(-1)[1]
which(out[,"GHat"]<(-1))[1]
out[419,]
plot(out)
parameters["beta"]
ScabiesModel(1, out[419, -1], parameters)
state <- c(S=0.9, IA=0.1, IAHat=0, IHat=0, GHat=0, YHat=0, Y=0, M=0, S2=0, I2C=0, I2CHat=0, I2=0, I2Hat=0)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
parameters <- c(beta=(1/63), phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0.0175)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
state <- c(S=900, IA=100, IAHat=0, IHat=0, GHat=0, YHat=0, Y=0, M=0, S2=0, I2C=0, I2CHat=0, I2=0, I2Hat=0)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
parameters <- c(beta=(1/63)/1000, phi=0.5, alpha=1/15, gamma=1/0.5, psi=1/30, sigma = 1/2, rho=1/5, delta=1/5,
tau = 0.0175)
out <- ode(y=state, times=seq(0, 100, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
parameters["beta"]
1/1
1/15
out <- ode(y=state, times=seq(0, 1000, by=0.1), func=ScabiesModel, parms=parameters, method="ode45")
tail(out)
out <- ode(y=state, times=seq(0, 1000, by=0.1), func=ScabiesModel, parms=parameters)
tail(out)
out <- ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters)
tail(out)
microbenchmark(ode(y=state, times=seq(0, 1000, 0.1), func=ScabiesModel, parms=parameters), units="s")
microbenchmark(ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters), units="s")
microbenchmark(ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters), units="s")
?microbenchmark
microbenchmark(ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters), unit="s")
microbenchmark(ode(y=state, times=c(0, 1000), func=ScabiesModel, parms=parameters, method = "ode45"), unit="s")
parameters <- c(beta=1.5/1000, gamma=1, omega=1)
microbenchmark(ode(y=state, times=c(0, 1000), func=SIRS, parms=parameters, method = "ode45"), unit="s")
parameters
SIRS
state <- c(S=900, I=100, R=0)
microbenchmark(ode(y=state, times=c(0, 1000), func=SIRS, parms=parameters, method = "ode45"), unit="s")
1000/37
seq(0, 1000, 27)
length(seq(0, 1000, 27))
length(seq(0, 1000, 7.2))
microbenchmark(ode(y=state, times=seq(0, 1000, 0.5), func=SIRS, parms=parameters, method = "ode45"), unit="s")
SIR <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
})
}
parameters <- c(beta = 1.2/1000, gamma=1, omega=1)
states <- c(S=900, I=100, R=0)
microbenchmark(ode(y=state, times=c(0, 1000), func=SIR, parms=parameters), units="s")
SIR <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
list(c(dS, dI, dR))
})
}
parameters <- c(beta = 1.2/1000, gamma=1, omega=1)
states <- c(S=900, I=100, R=0)
microbenchmark(ode(y=state, times=c(0, 1000), func=SIR, parms=parameters), units="s")
microbenchmark(ode(y=state, times=c(0, 1000), func=SIR, parms=parameters), units="s")
microbenchmark(ode(y=state, times=seq(0, 1000, 0.5), func=SIR, parms=parameters), units="s")
microbenchmark(ode(y=state, times=c(0, 1000), func=SIR, parms=parameters), unit="s")
microbenchmark(ode(y=state, times=seq(0, 1000, 0.5), func=SIR, parms=parameters), unit="s")
mda_coverage <- 0.8
setwd("~/Documents/PhD/MarkovChainSimulator/")
#Run to equilibrium
df_burnin <- simulator.runSimulation(output = "scabies.csv", y0 = "./Models/Scabies/states.json", transitions =  "./Models/Scabies/transitions.json", max_t = 6000)
df_burnin <- read.csv("scabies.csv")
fullmodel.writeInitialCondition(df_burnin)
# Run for 100 days just so it looks nice
df_initial <- simulator.runSimulation(output = "fullmodel_init.csv",  y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 100)
fullmodel.writeInitialCondition(df_initial)
mda_transitions <- fromJSON("./Models/Scabies/transitions_mda.json")
final_state <- df_initial[nrow(df_initial),]
mda_trans <- mda_transitions[mda_transitions$transition_type == "constant",]$source_state
mda_transitions[mda_transitions$transition_type == "constant",]$parameter <- t(mda_coverage*final_state[mda_trans])
write(toJSON(mda_transitions, pretty=T), file="./Models/Scabies/transitions_mda.json")
df_mda1 <- simulator.runSimulation(output = "fullmodel_mda1.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions_mda.json", max_t = 1, dt = 0.01)
df_mda1$t <- df_mda1$t + df_initial[nrow(df_initial), "t"]
fullmodel.writeInitialCondition(df_mda1)
#Run for 14 days between MDAs
df_between <- simulator.runSimulation(output = "fullmodel_betweenmda.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 14)
df_between$t <- df_between$t + df_mda1[nrow(df_mda1), "t"]
fullmodel.writeInitialCondition(df_between)
mda_transitions <- fromJSON("./Models/Scabies/transitions_mda.json")
final_state <- df_between[nrow(df_between),]
mda_trans <- mda_transitions[mda_transitions$transition_type == "constant",]$source_state
mda_transitions[mda_transitions$transition_type == "constant",]$parameter <- t(mda_coverage*final_state[mda_trans])
write(toJSON(mda_transitions, pretty=T), file="./Models/Scabies/transitions_mda.json")
df_mda2 <- simulator.runSimulation(output = "sigs_mda2.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions_mda.json", max_t = 1, dt = 0.01)
df_mda2$t <- df_mda2$t + df_between[nrow(df_between), "t"]
fullmodel.writeInitialCondition(df_mda2)
df_final <- simulator.runSimulation(output = "sigs_final.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 1000)
df_final$t <- df_final$t + df_mda2[nrow(df_mda2), "t"]
fullmodel_df <- rbind(df_initial, df_mda1, df_between, df_mda2, df_final)
attach(fullmodel_df)
reduced_fullmodel <- data.frame(t=t, I = I2C+I2CHat+I2+I2Hat, T=GHat+YHat+Y+M, S=S2+S)
detach(fullmodel_df)
reduced_fullmodel$model <- rep("Full", nrow(reduced_fullmodel))
sigs_df$model <- rep("Reduced", nrow(sigs_df))
colnames(sigs_df) <- gsub("G", "T", colnames(sigs_df))
combined <- rbind(reduced_fullmodel, sigs_df)
combined$model <- as.factor(combined$model)
combined_melted <- melt(combined, id.vars=c("t", "model"), value.name="State")
ggplot(data = combined_melted) + geom_line(aes(x=t, y=State, linetype=model)) + facet_wrap(~variable)
source('~/cloudstor/CoupledInfectionModels/SIGSFunctions.R', echo=TRUE)
library(ggplot2)
library(jsonlite)
mda_coverage <- 0.8
setwd("~/Documents/PhD/MarkovChainSimulator/")
#Run to equilibrium
df_burnin <- simulator.runSimulation(output = "scabies.csv", y0 = "./Models/Scabies/states.json", transitions =  "./Models/Scabies/transitions.json", max_t = 6000)
df_burnin <- read.csv("scabies.csv")
fullmodel.writeInitialCondition(df_burnin)
# Run for 100 days just so it looks nice
df_initial <- simulator.runSimulation(output = "fullmodel_init.csv",  y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 100)
fullmodel.writeInitialCondition(df_initial)
mda_transitions <- fromJSON("./Models/Scabies/transitions_mda.json")
final_state <- df_initial[nrow(df_initial),]
mda_trans <- mda_transitions[mda_transitions$transition_type == "constant",]$source_state
mda_transitions[mda_transitions$transition_type == "constant",]$parameter <- t(mda_coverage*final_state[mda_trans])
write(toJSON(mda_transitions, pretty=T), file="./Models/Scabies/transitions_mda.json")
df_mda1 <- simulator.runSimulation(output = "fullmodel_mda1.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions_mda.json", max_t = 1, dt = 0.01)
df_mda1$t <- df_mda1$t + df_initial[nrow(df_initial), "t"]
fullmodel.writeInitialCondition(df_mda1)
#Run for 14 days between MDAs
df_between <- simulator.runSimulation(output = "fullmodel_betweenmda.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 14)
df_between$t <- df_between$t + df_mda1[nrow(df_mda1), "t"]
fullmodel.writeInitialCondition(df_between)
mda_transitions <- fromJSON("./Models/Scabies/transitions_mda.json")
final_state <- df_between[nrow(df_between),]
mda_trans <- mda_transitions[mda_transitions$transition_type == "constant",]$source_state
mda_transitions[mda_transitions$transition_type == "constant",]$parameter <- t(mda_coverage*final_state[mda_trans])
write(toJSON(mda_transitions, pretty=T), file="./Models/Scabies/transitions_mda.json")
df_mda2 <- simulator.runSimulation(output = "sigs_mda2.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions_mda.json", max_t = 1, dt = 0.01)
df_mda2$t <- df_mda2$t + df_between[nrow(df_between), "t"]
fullmodel.writeInitialCondition(df_mda2)
df_final <- simulator.runSimulation(output = "sigs_final.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 1000)
df_final$t <- df_final$t + df_mda2[nrow(df_mda2), "t"]
fullmodel_df <- rbind(df_initial, df_mda1, df_between, df_mda2, df_final)
attach(fullmodel_df)
reduced_fullmodel <- data.frame(t=t, I = I2C+I2CHat+I2+I2Hat, T=GHat+YHat+Y+M, S=S2+S)
detach(fullmodel_df)
reduced_fullmodel$model <- rep("Full", nrow(reduced_fullmodel))
sigs_df$model <- rep("Reduced", nrow(sigs_df))
colnames(sigs_df) <- gsub("G", "T", colnames(sigs_df))
combined <- rbind(reduced_fullmodel, sigs_df)
combined$model <- as.factor(combined$model)
combined_melted <- melt(combined, id.vars=c("t", "model"), value.name="State")
ggplot(data = combined_melted) + geom_line(aes(x=t, y=State, linetype=model)) + facet_wrap(~variable)
library(ggplot2)
library(jsonlite)
library(reshape2)
mda_coverage <- 0.8
setwd("~/Documents/PhD/MarkovChainSimulator/")
#Run to equilibrium
df_burnin <- simulator.runSimulation(output = "scabies.csv", y0 = "./Models/Scabies/states.json", transitions =  "./Models/Scabies/transitions.json", max_t = 6000)
df_burnin <- read.csv("scabies.csv")
fullmodel.writeInitialCondition(df_burnin)
# Run for 100 days just so it looks nice
df_initial <- simulator.runSimulation(output = "fullmodel_init.csv",  y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 100)
fullmodel.writeInitialCondition(df_initial)
mda_transitions <- fromJSON("./Models/Scabies/transitions_mda.json")
final_state <- df_initial[nrow(df_initial),]
mda_trans <- mda_transitions[mda_transitions$transition_type == "constant",]$source_state
mda_transitions[mda_transitions$transition_type == "constant",]$parameter <- t(mda_coverage*final_state[mda_trans])
write(toJSON(mda_transitions, pretty=T), file="./Models/Scabies/transitions_mda.json")
df_mda1 <- simulator.runSimulation(output = "fullmodel_mda1.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions_mda.json", max_t = 1, dt = 0.01)
df_mda1$t <- df_mda1$t + df_initial[nrow(df_initial), "t"]
fullmodel.writeInitialCondition(df_mda1)
#Run for 14 days between MDAs
df_between <- simulator.runSimulation(output = "fullmodel_betweenmda.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 14)
df_between$t <- df_between$t + df_mda1[nrow(df_mda1), "t"]
fullmodel.writeInitialCondition(df_between)
mda_transitions <- fromJSON("./Models/Scabies/transitions_mda.json")
final_state <- df_between[nrow(df_between),]
mda_trans <- mda_transitions[mda_transitions$transition_type == "constant",]$source_state
mda_transitions[mda_transitions$transition_type == "constant",]$parameter <- t(mda_coverage*final_state[mda_trans])
write(toJSON(mda_transitions, pretty=T), file="./Models/Scabies/transitions_mda.json")
df_mda2 <- simulator.runSimulation(output = "sigs_mda2.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions_mda.json", max_t = 1, dt = 0.01)
df_mda2$t <- df_mda2$t + df_between[nrow(df_between), "t"]
fullmodel.writeInitialCondition(df_mda2)
df_final <- simulator.runSimulation(output = "sigs_final.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 1000)
df_final$t <- df_final$t + df_mda2[nrow(df_mda2), "t"]
fullmodel_df <- rbind(df_initial, df_mda1, df_between, df_mda2, df_final)
attach(fullmodel_df)
reduced_fullmodel <- data.frame(t=t, I = I2C+I2CHat+I2+I2Hat, T=GHat+YHat+Y+M, S=S2+S)
detach(fullmodel_df)
reduced_fullmodel$model <- rep("Full", nrow(reduced_fullmodel))
sigs_df$model <- rep("Reduced", nrow(sigs_df))
colnames(sigs_df) <- gsub("G", "T", colnames(sigs_df))
combined <- rbind(reduced_fullmodel, sigs_df)
combined$model <- as.factor(combined$model)
combined_melted <- melt(combined, id.vars=c("t", "model"), value.name="State")
ggplot(data = combined_melted) + geom_line(aes(x=t, y=State, linetype=model)) + facet_wrap(~variable)
library(jsonlite)
library(ggplot2)
mda_coverage <- 0.8
setwd("~/Documents/PhD/MarkovChainSimulator/")
# Run to equilibrium.
df_burnin <- simulator.runSimulation(output = "sigs.csv", y0 = "./Models/SIGS/states.json", transitions =  "./Models/SIGS/transitions.json", max_t = 6000)
sigs.writeInitialCondition(df_burnin)
# Run for 100 days just so it looks nice
df_initial <- simulator.runSimulation(output = "sigs_init.csv",  y0 = "./outputs/SIGS/initialcondition.json", transitions = "./Models/SIGS/transitions.json", max_t = 100)
sigs.writeInitialCondition(df_initial)
mda_transitions <- fromJSON("./Models/SIGS/transitions_mda.json")
final_state <- df_initial[nrow(df_initial),]
mda_trans <- mda_transitions[mda_transitions$transition_type == "constant",]$source_state
mda_transitions[mda_transitions$transition_type == "constant",]$parameter <- t(mda_coverage*final_state[mda_trans])
write(toJSON(mda_transitions, pretty=T), file="./Models/SIGS/transitions_mda.json")
df_mda1 <- simulator.runSimulation(output = "sigs_mda1.csv", y0 = "./outputs/SIGS/initialcondition.json", transitions = "./Models/SIGS/transitions_mda.json", max_t = 1, dt = 0.01)
df_mda1$t <- df_mda1$t + df_initial[nrow(df_initial), "t"]
sigs.writeInitialCondition(df_mda1)
#Run for 14 days between MDAs
df_between <- simulator.runSimulation(output = "sigs_betweenmda.csv", y0 = "./outputs/SIGS/initialcondition.json", transitions = "./Models/SIGS/transitions.json", max_t = 14)
df_between$t <- df_between$t + df_mda1[nrow(df_mda1), "t"]
sigs.writeInitialCondition(df_between)
mda_transitions <- fromJSON("./Models/SIGS/transitions_mda.json")
final_state <- df_between[nrow(df_between),]
mda_trans <- mda_transitions[mda_transitions$transition_type == "constant",]$source_state
mda_transitions[mda_transitions$transition_type == "constant",]$parameter <- t(mda_coverage*final_state[mda_trans])
write(toJSON(mda_transitions, pretty=T), file="./Models/SIGS/transitions_mda.json")
df_mda2 <- simulator.runSimulation(output = "sigs_mda2.csv", y0 = "./outputs/SIGS/initialcondition.json", transitions = "./Models/SIGS/transitions_mda.json", max_t = 1, dt = 0.01)
df_mda2$t <- df_mda2$t + df_between[nrow(df_between), "t"]
sigs.writeInitialCondition(df_mda2)
df_final <- simulator.runSimulation(output = "sigs_final.csv", y0 = "./outputs/SIGS/initialcondition.json", transitions = "./Models/SIGS/transitions.json", max_t = 1000)
df_final$t <- df_final$t + df_mda2[nrow(df_mda2), "t"]
sigs_df <- rbind(df_initial, df_mda1, df_between, df_mda2, df_final)
ggplot() + geom_line(data = sigs_df, aes(x=t, y=I))
library(ggplot2)
library(jsonlite)
library(reshape2)
mda_coverage <- 0.8
setwd("~/Documents/PhD/MarkovChainSimulator/")
#Run to equilibrium
df_burnin <- simulator.runSimulation(output = "scabies.csv", y0 = "./Models/Scabies/states.json", transitions =  "./Models/Scabies/transitions.json", max_t = 6000)
df_burnin <- read.csv("scabies.csv")
fullmodel.writeInitialCondition(df_burnin)
# Run for 100 days just so it looks nice
df_initial <- simulator.runSimulation(output = "fullmodel_init.csv",  y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 100)
fullmodel.writeInitialCondition(df_initial)
mda_transitions <- fromJSON("./Models/Scabies/transitions_mda.json")
final_state <- df_initial[nrow(df_initial),]
mda_trans <- mda_transitions[mda_transitions$transition_type == "constant",]$source_state
mda_transitions[mda_transitions$transition_type == "constant",]$parameter <- t(mda_coverage*final_state[mda_trans])
write(toJSON(mda_transitions, pretty=T), file="./Models/Scabies/transitions_mda.json")
df_mda1 <- simulator.runSimulation(output = "fullmodel_mda1.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions_mda.json", max_t = 1, dt = 0.01)
df_mda1$t <- df_mda1$t + df_initial[nrow(df_initial), "t"]
fullmodel.writeInitialCondition(df_mda1)
#Run for 14 days between MDAs
df_between <- simulator.runSimulation(output = "fullmodel_betweenmda.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 14)
df_between$t <- df_between$t + df_mda1[nrow(df_mda1), "t"]
fullmodel.writeInitialCondition(df_between)
mda_transitions <- fromJSON("./Models/Scabies/transitions_mda.json")
final_state <- df_between[nrow(df_between),]
mda_trans <- mda_transitions[mda_transitions$transition_type == "constant",]$source_state
mda_transitions[mda_transitions$transition_type == "constant",]$parameter <- t(mda_coverage*final_state[mda_trans])
write(toJSON(mda_transitions, pretty=T), file="./Models/Scabies/transitions_mda.json")
df_mda2 <- simulator.runSimulation(output = "sigs_mda2.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions_mda.json", max_t = 1, dt = 0.01)
df_mda2$t <- df_mda2$t + df_between[nrow(df_between), "t"]
fullmodel.writeInitialCondition(df_mda2)
df_final <- simulator.runSimulation(output = "sigs_final.csv", y0 = "./outputs/FullModel/initialcondition.json", transitions = "./Models/Scabies/transitions.json", max_t = 1000)
df_final$t <- df_final$t + df_mda2[nrow(df_mda2), "t"]
fullmodel_df <- rbind(df_initial, df_mda1, df_between, df_mda2, df_final)
attach(fullmodel_df)
reduced_fullmodel <- data.frame(t=t, I = I2C+I2CHat+I2+I2Hat, T=GHat+YHat+Y+M, S=S2+S)
detach(fullmodel_df)
reduced_fullmodel$model <- rep("Full", nrow(reduced_fullmodel))
sigs_df$model <- rep("Reduced", nrow(sigs_df))
colnames(sigs_df) <- gsub("G", "T", colnames(sigs_df))
combined <- rbind(reduced_fullmodel, sigs_df)
combined$model <- as.factor(combined$model)
combined_melted <- melt(combined, id.vars=c("t", "model"), value.name="State")
ggplot(data = combined_melted) + geom_line(aes(x=t, y=State, linetype=model)) + facet_wrap(~variable)
head(reduced_fullmodel)
tail(reduced_fullmodel)
tail(sigs_df)
head(sigs_df)
head(reduced_fullmodel)
