colnames(MLEFrame) <- c("Time", "S", "Community")
KMFrame$Model <- rep("Kaplan-Meier", nrow(KMFrame))
MLEFrame$Model <- rep("Parametric", nrow(MLEFrame))
CoxFrame$Model <- rep("Cox", nrow(CoxFrame))
survframe <- rbind.fill(KMFrame, MLEFrame, CoxFrame)
ggplot(data = survframe) + geom_line(aes(x=Time*12, y=S, colour=Community)) + facet_grid(.~Model) +
theme_bw() + theme(text = element_text(size = 7)) +
labs(x="Age [months]", y="S(t)") +
scale_x_continuous(limits = c(0, 60), expand=c(0,0)) + scale_y_continuous(limits = c(0, 1), expand=c(0,0)) +
theme(panel.grid = element_blank())
ggsave(paste(graphicsPathName, "scabies_all_models.png", sep=""), width = 13.58, height = 8.75, units = "cm", type = "cairo-png")
ggsave(paste(graphicsPathName, "scabies_all_models.png", sep=""), width = 13.58, height = 6, units = "cm", type = "cairo-png")
survframe$Community <- relevel(survframe$Community, "Cox")
attach(survframe)
Community
Community <- as.factor(Community)
Community <- relevel(Community, "Cox")
survframe$Community <- relevel(survframe$Community, "Cox")
detach(survframe)
survframe$Community <- relevel(survframe$Community, "Cox")
survframe$Community <- as.factor(survframe$Community)
survframe$Community <- relevel(survframe$Community, "Cox")
?relevel
survframe$Model <- as.factor(survframe$Model)
survframe$Model <- relevel(survframe$Model, "Cox")
survframe$Model <- relevel(survframe$Model, "Parametric")
survframe$Model <- relevel(survframe$Model, "Kaplan-Meier")
ggplot(data = survframe) + geom_line(aes(x=Time*12, y=S, colour=Community)) + facet_grid(.~Model) +
theme_bw() + theme(text = element_text(size = 7)) +
labs(x="Age [months]", y="S(t)") +
scale_x_continuous(limits = c(0, 60), expand=c(0,0)) + scale_y_continuous(limits = c(0, 1), expand=c(0,0)) +
theme(panel.grid = element_blank())
ggsave(paste(graphicsPathName, "scabies_all_models.png", sep=""), width = 13.58, height = 6, units = "cm", type = "cairo-png")
ggsave(paste(graphicsPathName, "scabies_all_models.png", sep=""), width = 13.58, height = 6.1, units = "cm", type = "cairo-png")
CPH
CPH_scabies_communities <- CPH
fitCPH <- coxph(Surv(time, status)~birth_quarter, data=df_scabies_filtered)
covariates <- data.frame("birth_quarter"=c(1, 2, 3, 4))
CPH <- survfit(fitCPH, newdata=covariates)
covariates <- data.frame("birth_quarter"=as.factor(c(1, 2, 3, 4)))
CPH <- survfit(fitCPH, newdata=covariates)
CPH_scabies_birthquarters <- CPH
CPH_scabies_birthquarters
CPH_scabies_communities
0.405*12
(0.720-0.405)*12
library(pryr)
library(plyr)
library(dplyr)
library(ggplot2)
source('~/Documents/PhD/GAS/2016_East_Arnhem_Healthy_Skin/clinic/scripts/regressionTesting.R')
library(Cairo)
saveGraphics <- F
#Skin sores
graphicsPathName <- "/Users/mlydeamore/Documents/PhD/GAS/2016_East_Arnhem_Healthy_Skin/clinic/scripts/regression/"
#Data loading
df_skinsores <- loadGASData()
df_skinsores_filtered <- filter(df_skinsores, birth_year != 2006)
#Cox - All covariates
fullCPH <- coxph(Surv(time, status)~community+sex+birth_year+birth_quarter, data=df_skinsores_filtered)
#COX - Just Community
fitCPH <- coxph(Surv(time, status)~community_B+community_C+community_D+community_E, data=df_skinsores_filtered)
covariates <- data.frame(rbind(rep(0,4), diag(4)))
colnames(covariates) <- c("community_B","community_C","community_D","community_E")
CPH <- survfit(fitCPH, newdata = covariates)
ggframe <- data.frame(time = CPH$time, surv = CPH$surv)
colnames(ggframe) <- c("Time","A","B","C", "D", "E")
CoxFrame <- reshape2:::melt.data.frame(data=ggframe, id.vars = "Time", variable.name = "Community", value.name="S")
#Parametric
listMLE <- lapply(levels(df_skinsores_filtered$community), function(x) {fitParametricBy(df_skinsores_filtered, x)})
MLETime <- seq(0, 6, 0.02)
l <- lapply(1:5, function(x) { convertMLEToFrame(MLETime, listMLE[[x]], levels(df_skinsores_filtered$community)[x])})
MLEFrame <- rbind.fill(l)
#Bootstrapping for CI:
estimatesLambda <- lapply(1:5, function(x) {
bootstr <- bootstrap(listMLE[[x]]$alpha, listMLE[[x]]$lambda, df = filter(df_skinsores_filtered, community == levels(df_skinsores_filtered$community)[x]), n = 200)
estimatesAlpha <- sapply(X = bootstr["estimate", ], FUN=head, 1)
estimatesLambda <- sapply(X = bootstr["estimate",], FUN=tail, 1)
medians <- -log((0.5-estimatesAlpha)/(1-estimatesAlpha)) /estimatesLambda
return (data.frame(community = levels(df_skinsores_filtered$community)[x],
lower = quantile(medians, probs = 0.05), upper = quantile(medians, probs = 0.95),
lowerAlpha = quantile(estimatesAlpha, probs=0.05), upperAlpha = quantile(estimatesAlpha, probs=0.95),
lowerMean = quantile(1/estimatesLambda, probs=0.05), upperMean = quantile(1/estimatesLambda, probs=0.95)))})
#Kaplan-Meier
KMSkinsores <- lapply(levels(df_skinsores_filtered$community), fitKMByCommunity, df=df_skinsores_filtered)
KMList <- lapply(1:5, function(x) { ret <- data.frame(Time=KMSkinsores[[x]]$time, surv=KMSkinsores[[x]]$surv, upper=KMSkinsores[[x]]$upper, lower=KMSkinsores[[x]]$lower,
Community = rep(levels(df_skinsores_filtered$community)[x], length(KMSkinsores[[x]]$time)) )} )
KMFrame <- rbind.fill(KMList)
#Residuals
residualParametric <- sapply(seq(1, nrow(KMFrame)), function(x) { calculateParametricEstimateAtTime(KMFrame[x, "Time"], listMLE[[KMFrame[x, "Community"] ]] ) - KMFrame[x, "surv"] } )
KMFrame$residualParametric <- residualParametric
#Boxplot of medians
comms <- levels(df_skinsores_filtered$community)
KMMedian <- lapply(1:5, function(x) { unname(summary(KMSkinsores[[x]])$table["median"])}) %>% unlist(.)
KMLower <- lapply(1:5, function(x) { unname(summary(KMSkinsores[[x]])$table["0.95LCL"])}) %>% unlist(.)
KMUpper <- lapply(1:5, function(x) { unname(summary(KMSkinsores[[x]])$table["0.95UCL"])}) %>% unlist(.)
KMMedianFrame <- data.frame(community = comms, model = rep("KM", length(comms)), median = KMMedian, lower = KMLower, upper=KMUpper)
KMMedianFrame[is.na(KMMedianFrame$upper), "upper"] <- KMMedianFrame[is.na(KMMedianFrame$upper), "median"]
CoxMedian <- summary(CPH)$table[,"median"]
CoxLower <- summary(CPH)$table[,"0.95LCL"]
CoxUpper <- summary(CPH)$table[,"0.95UCL"]
CoxMedianFrame <- data.frame(community = comms, model = rep("Cox", length(comms)), median = CoxMedian, lower = CoxLower, upper=CoxUpper)
ParametricMedian <- lapply(1:5, function(x) { (-log((0.5-listMLE[[x]]$alpha)/(1-listMLE[[x]]$alpha)))/listMLE[[x]]$lambda }) %>% unlist(.)
ParametricLower <- rbind.fill(estimatesLambda)$lower
ParametricUpper <- rbind.fill(estimatesLambda)$upper
ParametricMedianFrame <- data.frame(community = comms, model = rep("Parametric", length(comms)), median=ParametricMedian, lower=ParametricLower, upper=ParametricUpper)
medianFrame <- rbind.fill(KMMedianFrame, CoxMedianFrame, ParametricMedianFrame)
### Plotting ###
# Cox, Kaplan-Meier and Parametric, stratified by community, no CI.
ggplot() + geom_line(data = KMFrame, mapping = aes(x=Time*12, y=surv, colour=Community, linetype="Kaplan-Meier")) +
geom_line(data = MLEFrame, aes(x=time*12, y=estimate, colour=Community, linetype="Parametric")) + facet_wrap("Community") +
geom_line(data = CoxFrame, aes(x=Time*12, y=S, colour=Community, linetype="Cox")) +
scale_linetype_manual(values = c("Kaplan-Meier"="solid", "Cox"="dashed", "Parametric"="dotted")) + theme_bw() + theme(legend.title = element_blank(), legend.position = c(0.92,0.15), legend.justification = c(1,0), text = element_text(size = 7)) +
labs(x="Age [months]", y="S(t)") + guides(colour = F) + theme(panel.grid = element_blank()) +
scale_x_continuous(limits = c(0, 60), expand=c(0,0)) + scale_y_continuous(limits = c(0, 1), expand=c(0,0))
if (saveGraphics) {
ggsave(paste(graphicsPathName, "gas_all_models.png", sep=""), width = 13.58, height = 8.75, units = "cm")
}
# All Kaplan-Meier estimates, stratified by community, with CI.
ggplot() + geom_line(data = KMFrame, aes(x=Time, y=surv, colour=Community)) + geom_ribbon(data = KMFrame, aes(x=Time, ymin=lower, ymax=upper, fill=Community), alpha = 0.3) +
facet_wrap("Community") + theme_bw() + labs(x = "Age [years]", y = "S(t)") + theme(legend.position="none", text = element_text(size = 7)) +
scale_x_continuous(limits = c(0, 6), expand=c(0,0)) + scale_y_continuous(limits = c(0, 1), expand=c(0,0)) + theme(panel.grid = element_blank())
if (saveGraphics) {
ggsave(paste(graphicsPathName, "gas_kaplan_meier.png", sep=""), width = 13.58, height = 8.75, units = "cm", type = "cairo-png")
}
# Residuals between Parametric and Kaplan-Meier model - postive indicates Parametric > Kaplan-Meier, so a higher survival probability.
ggplot() + geom_point(data = KMFrame, aes(x=Time, y=residualParametric, colour=Community)) + geom_hline(yintercept=0) +
facet_wrap("Community") + theme_bw() + labs(x = "Age [years]", y = "Residuals") + theme(legend.position="none", text = element_text(size = 7)) +
scale_x_continuous(limits = c(0, 6), expand=c(0,0))
if (saveGraphics) {
ggsave(paste(graphicsPathName, "gas_residuals.png", sep=""), width = 13.58, height = 8.75, units = "cm", type = "cairo-png")
}
# Histogram of ages of first infection.
ggplot(data = filter(df_skinsores_filtered, status == 1)) + geom_histogram(aes(x=time*12), bins=60, colour="black") + theme_bw() + labs(x="Age [months]", y="Frequency") +
theme(text = element_text(size=12)) + scale_x_continuous(limits = c(0, 60), expand=c(0,0)) + scale_y_continuous(limits = c(0, NA), expand=c(0,0)) + expand_limits(y=60) +
theme(panel.grid = element_blank())
if (saveGraphics) {
ggsave(paste(graphicsPathName, "gas_ages_inection_histogram.png", sep=""), width = 13.58, height = 8.75, units="cm", type = "cairo-png")
}
#Bar chart of medians.
ggplot(data = medianFrame) + geom_boxplot(aes(x=model, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=model), stat = "identity") + facet_grid(.~community) +
theme_bw() + labs(x="Model", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), legend.title = element_blank(), panel.grid = element_blank()) + #+ scale_fill_grey(start = 0.35, name="Model")
coord_cartesian(ylim=c(0, 18))
if (saveGraphics) {
ggsave(paste(graphicsPathName, "gas_median_comparisons.png", sep=""), width = 13.58, height = 8.75, units="cm", type = "cairo-png")
}
ggplot(data = medianFrame) + geom_boxplot(aes(x=community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=community), stat = "identity") + facet_grid(.~model) +
theme_bw() + labs(x="Community", y="Median Age [months]", fill="Community") + theme(text = element_text(size=7), axis.text.x= element_blank()) + theme(panel.grid = element_blank()) + #+ scale_fill_grey(start = 0.35, name="Model")
coord_cartesian(ylim=c(0, 18))
colnames(KMFrame) <- c("Time", "S", "upper", "lower", "Community", "residualParametric")
colnames(MLEFrame) <- c("Time", "S", "Community")
KMFrame$Model <- rep("Kaplan-Meier", nrow(KMFrame))
MLEFrame$Model <- rep("Parametric", nrow(MLEFrame))
CoxFrame$Model <- rep("Cox", nrow(CoxFrame))
survframe <- rbind.fill(KMFrame, MLEFrame, CoxFrame)
ggplot(data = survframe) + geom_line(aes(x=Time*12, y=S, colour=Community)) + facet_grid(.~Model) +
theme_bw() + theme(text = element_text(size = 7)) +
labs(x="Age [months]", y="S(t)") +
scale_x_continuous(limits = c(0, 60), expand=c(0,0)) + scale_y_continuous(limits = c(0, 1), expand=c(0,0)) +
theme(panel.grid = element_blank())
head(medianFrame)
?gsub
medianFrame$model <- gsub("KM","Kaplan-Meier", medianFrame$model)
head(medianFrame)
ggplot(data = medianFrame) + geom_boxplot(aes(x=model, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=model), stat = "identity") + facet_grid(.~community) +
theme_bw() + labs(x="Model", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), legend.title = element_blank(), panel.grid = element_blank()) + #+ scale_fill_grey(start = 0.35, name="Model")
coord_cartesian(ylim=c(0, 18))
colnames(medianFrame) <- c("Community","Model","median","lower","upper")
ggplot(data = medianFrame) + geom_boxplot(aes(x=Community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=Community), stat = "identity") + facet_grid(.~Model) +
theme_bw() + labs(x="Model", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), legend.title = element_blank(), panel.grid = element_blank()) + #+ scale_fill_grey(start = 0.35, name="Model")
coord_cartesian(ylim=c(0, 18))
ggplot(data = medianFrame) + geom_boxplot(aes(x=Community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=Community), stat = "identity") + facet_grid(.~Model) +
theme_bw() + labs(x="Model", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), panel.grid = element_blank()) + #+ scale_fill_grey(start = 0.35, name="Model")
coord_cartesian(ylim=c(0, 18))
medianFrame$Model <- as.factor(medianFrame$Model)
medianFrame$Model <- relevel(medianFrame$Model, "Cox")
medianFrame$Model <- relevel(medianFrame$Model, "Parametric")
medianFrame$Model <- relevel(medianFrame$Model, "Kaplan-Meier")
ggplot(data = medianFrame) + geom_boxplot(aes(x=Community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=Community), stat = "identity") + facet_grid(.~Model) +
theme_bw() + labs(x="Model", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), panel.grid = element_blank()) + #+ scale_fill_grey(start = 0.35, name="Model")
coord_cartesian(ylim=c(0, 18))
ggplot(data = medianFrame) + geom_boxplot(aes(x=Community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=Community), stat = "identity") + facet_grid(.~Model) +
theme_bw() + labs(x="Model", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), panel.grid = element_blank()) + #+ scale_fill_grey(start = 0.35, name="Model")
()
ggplot(data = medianFrame) + geom_boxplot(aes(x=Community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=Community), stat = "identity") + facet_grid(.~Model) +
theme_bw() + labs(x="Model", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), panel.grid = element_blank()) + #+ scale_fill_grey(start = 0.35, name="Model")
r
ggplot(data = medianFrame) + geom_boxplot(aes(x=Community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=Community), stat = "identity") + facet_grid(.~Model) +
theme_bw() + labs(x="Model", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), panel.grid = element_blank())
ggplot(data = medianFrame) + geom_boxplot(aes(x=Community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=Community), stat = "identity") + facet_grid(.~Model) +
theme_bw() + labs(x="Model", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), panel.grid = element_blank()) + coord_cartesian(ylim=c(0, 12))
ggplot(data = medianFrame) + geom_boxplot(aes(x=Community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=Community), stat = "identity") + facet_grid(.~Model) +
theme_bw() + labs(x="Model", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), panel.grid = element_blank()) + coord_cartesian(ylim=c(0, 11.5))
presentation_theme <- theme(
panel.background = element_rect(fill = "transparent",colour = NA),
panel.border = element_rect(colour="white", size=2),
strip.background = element_rect(fill="#3C557F"),
strip.text = element_text(colour="white"),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid = element_blank(),
text=element_text(colour="white",size=30,face="bold"),
axis.line=element_line(colour="white",size=3),
axis.ticks=element_line(colour="white",size=3),
axis.text = element_text(colour="white",size=20),
legend.title = element_text(size=22,margin=(b=2)),
legend.background = element_rect(colour="white",fill="transparent"),
legend.key.size=unit(15,"mm"),
legend.key = element_rect(fill="transparent",colour="transparent")#,
#legend.text = element_text(size=20)
)
p <- ggplot(data = medianFrame) + geom_boxplot(aes(x=Community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=Community), stat = "identity") + facet_grid(.~model) +
theme_bw() + labs(x="Community", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), legend.title = element_blank(), panel.grid = element_blank()) + #+ scale_fill_grey(start = 0.35, name="Model")
coord_cartesian(ylim=c(0, 11.5)) + presentation_theme
png("skinsores-medians-transparent.png", width=1280, height=600,units="px",bg = "transparent")
print(p)
dev.off()
p <- ggplot(data = medianFrame) + geom_boxplot(aes(x=Community, lower=lower*12, upper=upper*12, middle=median*12, ymax = upper*12, ymin = lower*12, fill=Community), stat = "identity") + facet_grid(.~Model) +
theme_bw() + labs(x="Community", y="Median Age [months]") +
theme(text = element_text(size=7), axis.text.x = element_blank(), legend.title = element_blank(), panel.grid = element_blank()) + #+ scale_fill_grey(start = 0.35, name="Model")
coord_cartesian(ylim=c(0, 11.5)) + presentation_theme
png("skinsores-medians-transparent.png", width=1280, height=600,units="px",bg = "transparent")
print(p)
dev.off()
setwd()
getwd()
setwd("~/Documents/PhD/MarkovChainSimulator/")
df <- read.csv("chickens1.csv", header=T)
tail(df)
head(df)
ggplot(data = df) + geom_line(aes(x=t, y=E))
library(ggplot2)
ggplot(data = df) + geom_line(aes(x=t, y=E))
ggplot(data = df) + geom_line(aes(x=t, y=He.S))
ggplot(data = df) + geom_line(aes(x=t, y=E))
df <- read.csv("chickens1.csv", header=T)
ggplot(data = df) + geom_line(aes(x=t, y=E))
head(df)
df$E
df
df <- read.csv("chickens1.csv", header=T)
tail(df)
head(df)
ggplot(data = df) + geom_line(aes(x=t, y=E))
df <- read.csv("chickens1.csv", header=T)
tail(df)
16+23+26+11
df[33850, ] / 76
df <- read.csv("chickens1.csv", header=T)
tail(df)
18+22+36+5
df[34954, ] / 81
df <- read.csv("chickens1.csv", header=T)
tail(df)
25+24+24+11
df[38613, ] / 81
df[38613, ] / 84
df <- read.csv("chickens1.csv", header=T)
tail(df)
16+14+1+46+9
df[35856, ] / 84
df[35856, ] / 86
library(pryr)
library(plyr)
library(dplyr)
library(ggplot2)
source('~/Documents/PhD/GAS/2016_East_Arnhem_Healthy_Skin/clinic/scripts/regressionTesting.R')
library(Cairo)
graphicsPathName <- "/Users/mlydeamore/Documents/PhD/GAS/2016_East_Arnhem_Healthy_Skin/clinic/scripts/regression/"
saveGraphics <- F
df_scabies <- loadScabiesData()
df_scabies_filtered <- filter(df_scabies, birth_year != 2006)
sum(df_scabies_filtered$time)
sum(df_scabies_filtered$time*12)
mean(df_scabies_filtered$time)
mean(df_scabies_filtered$time)*12
median(df_scabies_filtered$time)*12
setwd("~/Documents/PhD/MarkovChainSimulator/")
df <- read.csv("chickens1.csv")
tail(df)
17+30+18+11
df <- read.csv("chickens1.csv")
tail(df)
df <- read.csv("chickens1.csv")
tail(df)
getAgeProportionAtEnd <- function(df) {
num_chicks <- with(df, Ch.S + He.S + Rs.S + eG.S + lg.S)
return (df[nrow(df), ]/num_chicks)}
getAgeProportionAtEnd(df)
getAgeProportionAtEnd <- function(df) {
num_chicks <- with(df, Ch.S + He.S + Rs.S + eG.S + lG.S)
return (df[nrow(df), ]/num_chicks)}
getAgeProportionAtEnd(df)
df <- read.csv("chickens1.csv")
getAgeProportionAtEnd(df)
df <- read.csv("chickens1.csv")
getAgeProportionAtEnd(df)
df <- read.csv("chickens1.csv")
getAgeProportionAtEnd(df)
df <- read.csv("Chickens/run-1.csv")
df <- read.csv("./Chickens/run-1.csv")
df <- read.csv("outputs/Chickens/run-1.csv")
average <- data.frame("Ch"=df$Ch.S, "eG"=df$eG.S, "lG"=df$lG.S, "He"=df$He.S, "Rs"=df$Rs.S)
for (i in seq(2, 50)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
average$Ch = average$Ch + df$Ch.S
average$eG = average$eG + df$eG.S
average$lG = average$lG + df$lG.S
average$He = average$He + df$He.S
average$Rs = average$Rs + df$Rs.S
}
df <- read.csv("outputs/Chickens/run-1.csv")
average <- data.frame("Ch"=df[nrow(df), "Ch.S"], "eG"=df[nrow(df), "eG.S"], "lG"=df[nrow(df), "lG.S"], "He"=df[nrow(df), "He.S"], "Rs"=df[nrow(df), "Rs.S"])
for (i in seq(2, 50)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
average$Ch = average$Ch + df[nrow(df), "Ch.S"]
average$eG = average$eG + df[nrow(df), "eG.S"]
average$lG = average$lG + df[nrow(df), "lG.S"]
average$He = average$He + df[nrow(df), "He.S"]
average$Rs = average$Rs + df[nrow(df), "Rs.S"]
}
average <- average/50
age_prop <- average/sum(average)
age_prop
head(df)
colnames(df)
df <- read.csv("outputs/Chickens/run-1.csv")
df <- read.csv("chickens1.csv")
tail(df)
head(df)
ggplot(data = df) + geom_line(aes(x=t, y=He.I))
ggplot(data = df) + geom_line(aes(x=t, y=Ch.I))
ggplot(data = df) + geom_line(aes(x=t, y=Rs.I))
ggplot(data = df) + geom_line(aes(x=t, y=eG.I))
df <- read.csv("chickens1.csv")
head(df)
tail(df)
ggplot(data = df) + geom_line(aes(x=t, y=eG.I))
ggplot(data = df) + geom_line(aes(x=t, y=Rs.I))
ggplot(data = df) + geom_line(aes(x=t, y=He.I))
df <- read.csv("chickens1.csv")
head(df)
ggplot(data = df) + geom_line(aes(x=t, y=He.I))
ggplot(data = df) + geom_line(aes(x=t, y=Ch.I))
ggplot(data = df) + geom_line(aes(x=t, y=Rs.I))
library(dynamite)
colnames(df)
".I" %in% colnames(df)
?grep
grep(".I", colnames(df))
grep(".I", colnames(df), value=T)
ggplotMatrix(df, id.vars=grep(".I", colnames(df), value=T))
library(dplyr
)
ggplotMatrix(df, id.vars=grep(".I", colnames(df), value=T))
library(reshape2)
ggplotMatrix(df, id.vars=grep(".I", colnames(df), value=T))
?ggplotMatrix
ggplotMatrix
ggplotMatrix(df, id.vars="t")
ggplotMatrix(df[, c(1, grep(".I", colnames(df), value=T))], id.vars="t")
ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t")
df <- read.csv("chickens1.csv")
ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t")
df <- read.csv("chickens1.csv")
ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t")
ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t") + xlim(0, 50)
head(df)
library(plotly)
ggplotly(ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t") + xlim(0, 50))
View(df)
end_size <- 0
died_out <- 0
for (i in seq(1, 100)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
if (sum(df[nrow(df), -1]) == 0) {
died_out <- died_out + 1
}
end_size <- end_size + sum(df[nrow(df), -1])/100
}
died_out
tail(df)
end_size
end_size <- 0
died_out <- 0
for (i in seq(1, 100)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
if (sum(df[nrow(df), grep(".I", colnames(df))]) == 0) {
died_out <- died_out + 1
}
end_size <- end_size + sum(df[nrow(df), -c(1, 5)])/100
}
end_size
died_out
tail(df$t)
5000/0.01
5000/0.02
50000/0.05
5000/0.05
head(df)
df <- read.csv("chickens1.csv")
ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t") + xlim(0, 50)
ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t") + xlim(0, 100)
average_frame <- read.csv("outputs/Chickens/run-1.csv")
average_frame[, -1] <- average_frame[, -1]/100
average_frame + df
average_frame <- read.csv("outputs/Chickens/run-1.csv")
average_frame[, -1] <- average_frame[, -1]/100
for (i in seq(2, 100)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
temp <- df
temp[, -1] <- temp[, -1]/100
average_frame <- average_frame + temp
}
tail(temp)
tail(average_frame)
head(temp_)
head(temp)
tail(temp)
head(average_frame)
average_frame <- read.csv("outputs/Chickens/run-1.csv")
average_frame[, -1] <- average_frame[, -1]/100
head(average_frame)
average_frame <- read.csv("outputs/Chickens/run-1.csv")
average_frame[, -1] <- average_frame[, -1]/100
for (i in seq(2, 100)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
temp <- df
while (temp[nrow(temp), 1] > 1000.1) {
temp <- temp[-nrow(temp), ]
}
temp[, -1] <- temp[, -1]/100
average_frame[, -1] <- average_frame[, -1] + temp[, -1]
}
head(average_frame)
tail(average_frame)
p <- ggplot()
for (i in seq(1, 100)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
p <- p + ggplotMatrix(df[, c(1, grep(".I", colnames(df), value=T))], id.vars="t")
}
p <- ggplot()
for (i in seq(1, 100)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
p <- p + ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t")
}
p <- ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t")
p
p + geom_line(aes(x=t, y="Ch.I"))
p
p + geom_line(data = df, aes(x=t, y="Ch.I"))
p + geom_line(data = df, aes(x=t, y=Ch.I))
p <- ggplot()
for (i in seq(1, 100)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
p <- p + ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t")
}
i <- 1
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
p <- p + ggplotMatrix(df[, c(1, grep(".I", colnames(df)))], id.vars="t")
p <- ggplot()
ggplotMatrix
ggplotMatrixLinesOnly <- function (df, id.vars)
{
foo <- melt(df, id.vars)
geom_line(data = foo, aes_string(x = id.vars, y = "value",
colour = "variable"))
}
p <- ggplot()
for (i in seq(1, 100)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
p <- p + ggplotMatrixLinesOnly(df[, c(1, grep(".I", colnames(df)))], id.vars="t")
}
p
p + xlim(0, 150)
p + xlim(0, 150) + facet_wrap(variable)
p + xlim(0, 150) + facet_wrap(~variable)
ggplotMatrixLinesOnly <- function (df, id.vars, ...)
{
foo <- melt(df, id.vars)
geom_line(data = foo, aes_string(x = id.vars, y = "value",
colour = "variable"), ...)
}
p <- ggplot()
for (i in seq(1, 100)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
p <- p + ggplotMatrixLinesOnly(df[, c(1, grep(".I", colnames(df)))], id.vars="t", alpha=0.1)
}
p + xlim(0, 150) + facet_wrap(~variable)
p <- ggplot()
for (i in seq(1, 100)) {
df <- read.csv(paste("outputs/Chickens/run-",i,".csv", sep=""))
p <- p + ggplotMatrixLinesOnly(df[, c(1, grep(".I", colnames(df)))], id.vars="t", alpha=0.2)
}
p
p + xlim(0, 150) + facet_wrap(~variable)
df <- read.csv("chickens1.csv")
tail(df)
ggplotMatrixLinesOnly(df[, c(1, grep(".I", colnames(df)))], id.vars="t", alpha=1)
ggplot() + ggplotMatrixLinesOnly(df[, c(1, grep(".I", colnames(df)))], id.vars="t", alpha=1)
ggplot() + ggplotMatrixLinesOnly(df[, c(1, grep(".I", colnames(df)))], id.vars="t", alpha=1) + ylim(0, 100)
ggplot() + ggplotMatrixLinesOnly(df[, c(1, grep(".I", colnames(df)))], id.vars="t", alpha=1) + xlim(0, 100)
